
car_steering.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000098a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  0000098a  00000a1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800074  00800074  00000a32  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a32  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00000aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e17  00000000  00000000  00000c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c83  00000000  00000000  00002aa7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000112c  00000000  00000000  0000372a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000358  00000000  00000000  00004858  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000086b  00000000  00000000  00004bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001527  00000000  00000000  0000541b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00006942  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e8       	ldi	r30, 0x8A	; 138
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 37       	cpi	r26, 0x7A	; 122
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c9 01 	call	0x392	; 0x392 <main>
  8a:	0c 94 c3 04 	jmp	0x986	; 0x986 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Car_SM_Init>:
#include "softwareDelay.h"
#include "US.h"
#include "Steering.h"
u8_ERROR_STATUS_t Car_SM_Init(void){
	
Us_Init();
  92:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <Us_Init>
Steering_Init();
  96:	0e 94 2b 03 	call	0x656	; 0x656 <Steering_Init>
Steering_SteerCar(CAR_FORWARD,30);
  9a:	6e e1       	ldi	r22, 0x1E	; 30
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	0e 94 33 03 	call	0x666	; 0x666 <Steering_SteerCar>
return E_OK;
}
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	08 95       	ret

000000a6 <Car_SM_Update>:
u8_ERROR_STATUS_t Car_SM_Update(void){
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	00 d0       	rcall	.+0      	; 0xac <Car_SM_Update+0x6>
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
	uint16_t u16_distance;
	Us_Trigger();
  b0:	0e 94 61 04 	call	0x8c2	; 0x8c2 <Us_Trigger>
	Us_GetDistance(&u16_distance);
  b4:	ce 01       	movw	r24, r28
  b6:	01 96       	adiw	r24, 0x01	; 1
  b8:	0e 94 73 04 	call	0x8e6	; 0x8e6 <Us_GetDistance>
	if(u16_distance>45){
  bc:	89 81       	ldd	r24, Y+1	; 0x01
  be:	9a 81       	ldd	r25, Y+2	; 0x02
  c0:	8e 32       	cpi	r24, 0x2E	; 46
  c2:	91 05       	cpc	r25, r1
  c4:	58 f0       	brcs	.+22     	; 0xdc <Car_SM_Update+0x36>
		Steering_SteerCar(CAR_FORWARD,30);
  c6:	6e e1       	ldi	r22, 0x1E	; 30
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	0e 94 33 03 	call	0x666	; 0x666 <Steering_SteerCar>
		softwareDelayMs(150);
  ce:	66 e9       	ldi	r22, 0x96	; 150
  d0:	70 e0       	ldi	r23, 0x00	; 0
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 15 03 	call	0x62a	; 0x62a <softwareDelayMs>
  da:	17 c0       	rjmp	.+46     	; 0x10a <Car_SM_Update+0x64>
	}
	else if  (u16_distance>30){
  dc:	4f 97       	sbiw	r24, 0x1f	; 31
  de:	58 f0       	brcs	.+22     	; 0xf6 <Car_SM_Update+0x50>
		/*Steering_SteerCar(CAR_STOP	,0);*/
		//softwareDelayMs(50);
		Steering_SteerCar(CAR_RIGHT	,30);
  e0:	6e e1       	ldi	r22, 0x1E	; 30
  e2:	83 e0       	ldi	r24, 0x03	; 3
  e4:	0e 94 33 03 	call	0x666	; 0x666 <Steering_SteerCar>
		softwareDelayMs(200);	
  e8:	68 ec       	ldi	r22, 0xC8	; 200
  ea:	70 e0       	ldi	r23, 0x00	; 0
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 15 03 	call	0x62a	; 0x62a <softwareDelayMs>
  f4:	0a c0       	rjmp	.+20     	; 0x10a <Car_SM_Update+0x64>
	}
	else {
// 			Steering_SteerCar(CAR_STOP	,0);
// 			softwareDelayMs(50);
			Steering_SteerCar(CAR_BACKWARD,30);
  f6:	6e e1       	ldi	r22, 0x1E	; 30
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	0e 94 33 03 	call	0x666	; 0x666 <Steering_SteerCar>
			softwareDelayMs(150);
  fe:	66 e9       	ldi	r22, 0x96	; 150
 100:	70 e0       	ldi	r23, 0x00	; 0
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 15 03 	call	0x62a	; 0x62a <softwareDelayMs>
			
	}
	return E_OK;
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	0f 90       	pop	r0
 10e:	0f 90       	pop	r0
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	08 95       	ret

00000116 <DIO_init>:
 * Created: 17/02/2020 11:33:51 ุต
 *  Author: TOSHIBA
 */ 
#include "DIO.h"

extern u8_ERROR_STATUS_t DIO_init (gstr_DIO_Cfg_t *pstr_DIOCfg){
 116:	fc 01       	movw	r30, r24
	if (pstr_DIOCfg!=NULL){
 118:	89 2b       	or	r24, r25
 11a:	09 f4       	brne	.+2      	; 0x11e <DIO_init+0x8>
 11c:	55 c0       	rjmp	.+170    	; 0x1c8 <DIO_init+0xb2>
	switch (pstr_DIOCfg->u8_GPIO){
 11e:	80 81       	ld	r24, Z
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	c9 f0       	breq	.+50     	; 0x156 <DIO_init+0x40>
 124:	28 f0       	brcs	.+10     	; 0x130 <DIO_init+0x1a>
 126:	82 30       	cpi	r24, 0x02	; 2
 128:	49 f1       	breq	.+82     	; 0x17c <DIO_init+0x66>
 12a:	83 30       	cpi	r24, 0x03	; 3
 12c:	d1 f1       	breq	.+116    	; 0x1a2 <DIO_init+0x8c>
 12e:	4e c0       	rjmp	.+156    	; 0x1cc <DIO_init+0xb6>
		
		case GPIOA :
		switch (pstr_DIOCfg->u8_dir){
 130:	82 81       	ldd	r24, Z+2	; 0x02
 132:	88 23       	and	r24, r24
 134:	19 f0       	breq	.+6      	; 0x13c <DIO_init+0x26>
 136:	8f 3f       	cpi	r24, 0xFF	; 255
 138:	41 f0       	breq	.+16     	; 0x14a <DIO_init+0x34>
 13a:	4a c0       	rjmp	.+148    	; 0x1d0 <DIO_init+0xba>
			case INPUT:
			PORTA_DIR&=~(pstr_DIOCfg->u8_pins);
 13c:	9a b3       	in	r25, 0x1a	; 26
 13e:	81 81       	ldd	r24, Z+1	; 0x01
 140:	80 95       	com	r24
 142:	89 23       	and	r24, r25
 144:	8a bb       	out	0x1a, r24	; 26
		}
		break;
			default:
			return E_NOK;
	}
	return  E_OK;
 146:	80 e0       	ldi	r24, 0x00	; 0
		
		case GPIOA :
		switch (pstr_DIOCfg->u8_dir){
			case INPUT:
			PORTA_DIR&=~(pstr_DIOCfg->u8_pins);
			break;
 148:	08 95       	ret
			case OUTPUT:
			PORTA_DIR|=	pstr_DIOCfg->u8_pins;
 14a:	9a b3       	in	r25, 0x1a	; 26
 14c:	81 81       	ldd	r24, Z+1	; 0x01
 14e:	89 2b       	or	r24, r25
 150:	8a bb       	out	0x1a, r24	; 26
		}
		break;
			default:
			return E_NOK;
	}
	return  E_OK;
 152:	80 e0       	ldi	r24, 0x00	; 0
			case INPUT:
			PORTA_DIR&=~(pstr_DIOCfg->u8_pins);
			break;
			case OUTPUT:
			PORTA_DIR|=	pstr_DIOCfg->u8_pins;
			break;
 154:	08 95       	ret
		}
		break;
		
		case GPIOB :
		switch (pstr_DIOCfg->u8_dir){
 156:	82 81       	ldd	r24, Z+2	; 0x02
 158:	88 23       	and	r24, r24
 15a:	19 f0       	breq	.+6      	; 0x162 <DIO_init+0x4c>
 15c:	8f 3f       	cpi	r24, 0xFF	; 255
 15e:	41 f0       	breq	.+16     	; 0x170 <DIO_init+0x5a>
 160:	39 c0       	rjmp	.+114    	; 0x1d4 <DIO_init+0xbe>
			case INPUT:
			PORTB_DIR&=~(pstr_DIOCfg->u8_pins);
 162:	97 b3       	in	r25, 0x17	; 23
 164:	81 81       	ldd	r24, Z+1	; 0x01
 166:	80 95       	com	r24
 168:	89 23       	and	r24, r25
 16a:	87 bb       	out	0x17, r24	; 23
		}
		break;
			default:
			return E_NOK;
	}
	return  E_OK;
 16c:	80 e0       	ldi	r24, 0x00	; 0
		
		case GPIOB :
		switch (pstr_DIOCfg->u8_dir){
			case INPUT:
			PORTB_DIR&=~(pstr_DIOCfg->u8_pins);
			break;
 16e:	08 95       	ret
			case OUTPUT:
			PORTB_DIR|=	(pstr_DIOCfg->u8_pins);
 170:	97 b3       	in	r25, 0x17	; 23
 172:	81 81       	ldd	r24, Z+1	; 0x01
 174:	89 2b       	or	r24, r25
 176:	87 bb       	out	0x17, r24	; 23
		}
		break;
			default:
			return E_NOK;
	}
	return  E_OK;
 178:	80 e0       	ldi	r24, 0x00	; 0
			case INPUT:
			PORTB_DIR&=~(pstr_DIOCfg->u8_pins);
			break;
			case OUTPUT:
			PORTB_DIR|=	(pstr_DIOCfg->u8_pins);
			break;
 17a:	08 95       	ret
		}
		
		break;
		
		case GPIOC :
		switch (pstr_DIOCfg->u8_dir)
 17c:	82 81       	ldd	r24, Z+2	; 0x02
 17e:	88 23       	and	r24, r24
 180:	19 f0       	breq	.+6      	; 0x188 <DIO_init+0x72>
 182:	8f 3f       	cpi	r24, 0xFF	; 255
 184:	41 f0       	breq	.+16     	; 0x196 <DIO_init+0x80>
 186:	28 c0       	rjmp	.+80     	; 0x1d8 <DIO_init+0xc2>
		{
			case INPUT:
			PORTC_DIR&=~(pstr_DIOCfg->u8_pins);
 188:	94 b3       	in	r25, 0x14	; 20
 18a:	81 81       	ldd	r24, Z+1	; 0x01
 18c:	80 95       	com	r24
 18e:	89 23       	and	r24, r25
 190:	84 bb       	out	0x14, r24	; 20
		}
		break;
			default:
			return E_NOK;
	}
	return  E_OK;
 192:	80 e0       	ldi	r24, 0x00	; 0
		case GPIOC :
		switch (pstr_DIOCfg->u8_dir)
		{
			case INPUT:
			PORTC_DIR&=~(pstr_DIOCfg->u8_pins);
			break;
 194:	08 95       	ret
			case OUTPUT:
			PORTC_DIR|=	(pstr_DIOCfg->u8_pins);
 196:	94 b3       	in	r25, 0x14	; 20
 198:	81 81       	ldd	r24, Z+1	; 0x01
 19a:	89 2b       	or	r24, r25
 19c:	84 bb       	out	0x14, r24	; 20
		}
		break;
			default:
			return E_NOK;
	}
	return  E_OK;
 19e:	80 e0       	ldi	r24, 0x00	; 0
			case INPUT:
			PORTC_DIR&=~(pstr_DIOCfg->u8_pins);
			break;
			case OUTPUT:
			PORTC_DIR|=	(pstr_DIOCfg->u8_pins);
			break;
 1a0:	08 95       	ret
		}
		
		break;
		
		case GPIOD :
		switch (pstr_DIOCfg->u8_dir){
 1a2:	82 81       	ldd	r24, Z+2	; 0x02
 1a4:	88 23       	and	r24, r24
 1a6:	19 f0       	breq	.+6      	; 0x1ae <DIO_init+0x98>
 1a8:	8f 3f       	cpi	r24, 0xFF	; 255
 1aa:	41 f0       	breq	.+16     	; 0x1bc <DIO_init+0xa6>
 1ac:	17 c0       	rjmp	.+46     	; 0x1dc <DIO_init+0xc6>
			case INPUT:
			PORTD_DIR&=~(pstr_DIOCfg->u8_pins);
 1ae:	91 b3       	in	r25, 0x11	; 17
 1b0:	81 81       	ldd	r24, Z+1	; 0x01
 1b2:	80 95       	com	r24
 1b4:	89 23       	and	r24, r25
 1b6:	81 bb       	out	0x11, r24	; 17
		}
		break;
			default:
			return E_NOK;
	}
	return  E_OK;
 1b8:	80 e0       	ldi	r24, 0x00	; 0
		
		case GPIOD :
		switch (pstr_DIOCfg->u8_dir){
			case INPUT:
			PORTD_DIR&=~(pstr_DIOCfg->u8_pins);
			break;
 1ba:	08 95       	ret
			case OUTPUT:
			PORTD_DIR|=(pstr_DIOCfg->u8_pins);
 1bc:	91 b3       	in	r25, 0x11	; 17
 1be:	81 81       	ldd	r24, Z+1	; 0x01
 1c0:	89 2b       	or	r24, r25
 1c2:	81 bb       	out	0x11, r24	; 17
		}
		break;
			default:
			return E_NOK;
	}
	return  E_OK;
 1c4:	80 e0       	ldi	r24, 0x00	; 0
			case INPUT:
			PORTD_DIR&=~(pstr_DIOCfg->u8_pins);
			break;
			case OUTPUT:
			PORTD_DIR|=(pstr_DIOCfg->u8_pins);
			break;
 1c6:	08 95       	ret
			return E_NOK;
	}
	return  E_OK;
}
else 
return E_NOK;
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	08 95       	ret
			PORTD_DIR|=(pstr_DIOCfg->u8_pins);
			break;
		}
		break;
			default:
			return E_NOK;
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	08 95       	ret
	}
	return  E_OK;
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	08 95       	ret
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	08 95       	ret
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	08 95       	ret
 1dc:	80 e0       	ldi	r24, 0x00	; 0
}
else 
return E_NOK;

}
 1de:	08 95       	ret

000001e0 <DIO_Write>:
extern u8_ERROR_STATUS_t DIO_Write (uint8_t u8_GPIO, uint8_t u8_pins, uint8_t u8_value){
	switch (u8_GPIO){
 1e0:	81 30       	cpi	r24, 0x01	; 1
 1e2:	a9 f0       	breq	.+42     	; 0x20e <DIO_Write+0x2e>
 1e4:	28 f0       	brcs	.+10     	; 0x1f0 <DIO_Write+0x10>
 1e6:	82 30       	cpi	r24, 0x02	; 2
 1e8:	09 f1       	breq	.+66     	; 0x22c <DIO_Write+0x4c>
 1ea:	83 30       	cpi	r24, 0x03	; 3
 1ec:	71 f1       	breq	.+92     	; 0x24a <DIO_Write+0x6a>
 1ee:	3c c0       	rjmp	.+120    	; 0x268 <DIO_Write+0x88>
		case GPIOA :
		/*PORTA_DATA=u8_value;*/
		switch(u8_value){
 1f0:	44 23       	and	r20, r20
 1f2:	39 f0       	breq	.+14     	; 0x202 <DIO_Write+0x22>
 1f4:	4f 3f       	cpi	r20, 0xFF	; 255
 1f6:	d1 f5       	brne	.+116    	; 0x26c <DIO_Write+0x8c>
			
			case HIGH:
			PORTA_DATA|=u8_pins;
 1f8:	8b b3       	in	r24, 0x1b	; 27
 1fa:	68 2b       	or	r22, r24
 1fc:	6b bb       	out	0x1b, r22	; 27
		}
		break;
			default:
			return E_NOK;
	}
	return E_OK;
 1fe:	80 e0       	ldi	r24, 0x00	; 0
		/*PORTA_DATA=u8_value;*/
		switch(u8_value){
			
			case HIGH:
			PORTA_DATA|=u8_pins;
			break;
 200:	08 95       	ret
			case LOW :
			PORTA_DATA&=(~u8_pins);
 202:	8b b3       	in	r24, 0x1b	; 27
 204:	60 95       	com	r22
 206:	68 23       	and	r22, r24
 208:	6b bb       	out	0x1b, r22	; 27
		}
		break;
			default:
			return E_NOK;
	}
	return E_OK;
 20a:	80 e0       	ldi	r24, 0x00	; 0
			case HIGH:
			PORTA_DATA|=u8_pins;
			break;
			case LOW :
			PORTA_DATA&=(~u8_pins);
			break;
 20c:	08 95       	ret
		}
		break;
		
		case GPIOB :
		
		switch(u8_value){
 20e:	44 23       	and	r20, r20
 210:	39 f0       	breq	.+14     	; 0x220 <DIO_Write+0x40>
 212:	4f 3f       	cpi	r20, 0xFF	; 255
 214:	69 f5       	brne	.+90     	; 0x270 <DIO_Write+0x90>
			
			case HIGH:
			PORTB_DATA|=u8_pins;
 216:	88 b3       	in	r24, 0x18	; 24
 218:	68 2b       	or	r22, r24
 21a:	68 bb       	out	0x18, r22	; 24
		}
		break;
			default:
			return E_NOK;
	}
	return E_OK;
 21c:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_value){
			
			case HIGH:
			PORTB_DATA|=u8_pins;
			break;
 21e:	08 95       	ret
			case LOW :
			PORTB_DATA&=(~u8_pins);
 220:	88 b3       	in	r24, 0x18	; 24
 222:	60 95       	com	r22
 224:	68 23       	and	r22, r24
 226:	68 bb       	out	0x18, r22	; 24
		}
		break;
			default:
			return E_NOK;
	}
	return E_OK;
 228:	80 e0       	ldi	r24, 0x00	; 0
			case HIGH:
			PORTB_DATA|=u8_pins;
			break;
			case LOW :
			PORTB_DATA&=(~u8_pins);
			break;
 22a:	08 95       	ret
		}
		break;
		
		case GPIOC :
		switch(u8_value){
 22c:	44 23       	and	r20, r20
 22e:	39 f0       	breq	.+14     	; 0x23e <DIO_Write+0x5e>
 230:	4f 3f       	cpi	r20, 0xFF	; 255
 232:	01 f5       	brne	.+64     	; 0x274 <DIO_Write+0x94>
			
			case HIGH:
			PORTC_DATA|=u8_pins;
 234:	85 b3       	in	r24, 0x15	; 21
 236:	68 2b       	or	r22, r24
 238:	65 bb       	out	0x15, r22	; 21
		}
		break;
			default:
			return E_NOK;
	}
	return E_OK;
 23a:	80 e0       	ldi	r24, 0x00	; 0
		case GPIOC :
		switch(u8_value){
			
			case HIGH:
			PORTC_DATA|=u8_pins;
			break;
 23c:	08 95       	ret
			case LOW :
			PORTC_DATA&=(~u8_pins);
 23e:	85 b3       	in	r24, 0x15	; 21
 240:	60 95       	com	r22
 242:	68 23       	and	r22, r24
 244:	65 bb       	out	0x15, r22	; 21
		}
		break;
			default:
			return E_NOK;
	}
	return E_OK;
 246:	80 e0       	ldi	r24, 0x00	; 0
			case HIGH:
			PORTC_DATA|=u8_pins;
			break;
			case LOW :
			PORTC_DATA&=(~u8_pins);
			break;
 248:	08 95       	ret
		}
		break;
		
		case GPIOD :
		switch(u8_value){
 24a:	44 23       	and	r20, r20
 24c:	39 f0       	breq	.+14     	; 0x25c <DIO_Write+0x7c>
 24e:	4f 3f       	cpi	r20, 0xFF	; 255
 250:	99 f4       	brne	.+38     	; 0x278 <DIO_Write+0x98>
			
			case HIGH:
			PORTD_DATA|=u8_pins;
 252:	82 b3       	in	r24, 0x12	; 18
 254:	68 2b       	or	r22, r24
 256:	62 bb       	out	0x12, r22	; 18
		}
		break;
			default:
			return E_NOK;
	}
	return E_OK;
 258:	80 e0       	ldi	r24, 0x00	; 0
		case GPIOD :
		switch(u8_value){
			
			case HIGH:
			PORTD_DATA|=u8_pins;
			break;
 25a:	08 95       	ret
			case LOW :
			PORTD_DATA&=(~u8_pins);
 25c:	82 b3       	in	r24, 0x12	; 18
 25e:	60 95       	com	r22
 260:	68 23       	and	r22, r24
 262:	62 bb       	out	0x12, r22	; 18
		}
		break;
			default:
			return E_NOK;
	}
	return E_OK;
 264:	80 e0       	ldi	r24, 0x00	; 0
			case HIGH:
			PORTD_DATA|=u8_pins;
			break;
			case LOW :
			PORTD_DATA&=(~u8_pins);
			break;
 266:	08 95       	ret
		}
		break;
			default:
			return E_NOK;
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	08 95       	ret
	}
	return E_OK;
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	08 95       	ret
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	08 95       	ret
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	08 95       	ret
 278:	80 e0       	ldi	r24, 0x00	; 0
}
 27a:	08 95       	ret

0000027c <Icu_Init>:
gstr_DIO_Cfg_t  str_ICU_CH2={ EN_SW_ICU_PORT,EN_SW_ICU_PIN,INPUT};

gstrTimerConfig_t str_ICU_TIMER_CH2={TIMER_CH_2,TIMER_MODE,TIMER2_PRESCALER_1024,TIMER_MODE_POOLING};	//1024			
											

u8_ERROR_STATUS_t Icu_Init(gstr_Icu_cfg_t * str_Icu_Cfg){
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
	 uint8_t u8_MotorErrorStatus;
	 if(str_Icu_Cfg!=NULL){
 280:	00 97       	sbiw	r24, 0x00	; 0
 282:	11 f1       	breq	.+68     	; 0x2c8 <Icu_Init+0x4c>
 284:	ec 01       	movw	r28, r24
		 
		 switch(str_Icu_Cfg->ICU_Ch_No){
 286:	88 81       	ld	r24, Y
 288:	82 30       	cpi	r24, 0x02	; 2
 28a:	69 f4       	brne	.+26     	; 0x2a6 <Icu_Init+0x2a>
			 case ICU_CH2:
			 DIO_init (&str_ICU_CH2);
 28c:	84 e6       	ldi	r24, 0x64	; 100
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 8b 00 	call	0x116	; 0x116 <DIO_init>
			  SET_BIT(MCUCSR,SWICU_EDGE_MASK);
 294:	84 b7       	in	r24, 0x34	; 52
 296:	80 64       	ori	r24, 0x40	; 64
 298:	84 bf       	out	0x34, r24	; 52
			  SET_BIT(GIFR,INT2_INTER_FLAG_BIT);
 29a:	8a b7       	in	r24, 0x3a	; 58
 29c:	80 62       	ori	r24, 0x20	; 32
 29e:	8a bf       	out	0x3a, r24	; 58
			  SET_BIT(GICR, INT2_INTER_BIT);
 2a0:	8b b7       	in	r24, 0x3b	; 59
 2a2:	80 62       	ori	r24, 0x20	; 32
 2a4:	8b bf       	out	0x3b, r24	; 59
			 break;
			 default:
			 u8_MotorErrorStatus=E_NOK;
			 break;
		 }
		 switch (str_Icu_Cfg->ICU_Ch_Timer){
 2a6:	89 81       	ldd	r24, Y+1	; 0x01
 2a8:	81 11       	cpse	r24, r1
 2aa:	09 c0       	rjmp	.+18     	; 0x2be <Icu_Init+0x42>
			 
			 case ICU_TIMER_CH0 :
			 Timer_Init(&str_ICU_TIMER_CH2);
 2ac:	80 e6       	ldi	r24, 0x60	; 96
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 96 03 	call	0x72c	; 0x72c <Timer_Init>
			 TimerCH=TIMER_CH_2;
 2b4:	82 e0       	ldi	r24, 0x02	; 2
 2b6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
			 u8_MotorErrorStatus=E_OK;
 2ba:	80 e0       	ldi	r24, 0x00	; 0
			 break;
 2bc:	01 c0       	rjmp	.+2      	; 0x2c0 <Icu_Init+0x44>
			 
			 default:
			 u8_MotorErrorStatus=E_NOK;
 2be:	81 e0       	ldi	r24, 0x01	; 1
			 break;	 
		 }		
		
		 SET_BIT(SREG,GENERAL_INTERRUPT_BIT);
 2c0:	9f b7       	in	r25, 0x3f	; 63
 2c2:	90 68       	ori	r25, 0x80	; 128
 2c4:	9f bf       	out	0x3f, r25	; 63
 2c6:	01 c0       	rjmp	.+2      	; 0x2ca <Icu_Init+0x4e>
	 }
	 else 
	 u8_MotorErrorStatus=E_NOK;
 2c8:	81 e0       	ldi	r24, 0x01	; 1
	 return  u8_MotorErrorStatus;
	 }
 2ca:	df 91       	pop	r29
 2cc:	cf 91       	pop	r28
 2ce:	08 95       	ret

000002d0 <Icu_ReadTime>:
	 
	 
	 
u8_ERROR_STATUS_t Icu_ReadTime(uint8_t u8_Icu_Channel, uint8_t u8_Icu_EdgeToEdge, uint32_t * pu32_Icu_Time){
	uint8_t u8_MotorErrorStatus;
	if(pu32_Icu_Time!=NULL){
 2d0:	41 15       	cp	r20, r1
 2d2:	51 05       	cpc	r21, r1
 2d4:	81 f0       	breq	.+32     	; 0x2f6 <Icu_ReadTime+0x26>
	switch (u8_Icu_Channel){
 2d6:	82 30       	cpi	r24, 0x02	; 2
 2d8:	71 f4       	brne	.+28     	; 0x2f6 <Icu_ReadTime+0x26>
		case ICU_CH2 :
		
		switch (u8_Icu_EdgeToEdge){
 2da:	61 30       	cpi	r22, 0x01	; 1
 2dc:	61 f4       	brne	.+24     	; 0x2f6 <Icu_ReadTime+0x26>

			case ICU_RISE_TO_FALL:
			while( interrupt_phase!=STOP_INERE);
 2de:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <interrupt_phase>
 2e2:	83 30       	cpi	r24, 0x03	; 3
 2e4:	e1 f7       	brne	.-8      	; 0x2de <Icu_ReadTime+0xe>
 2e6:	ba 01       	movw	r22, r20
			
			Timer_GetValue( TimerCH ,(uint16_t*)pu32_Icu_Time);
 2e8:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 2ec:	0e 94 38 04 	call	0x870	; 0x870 <Timer_GetValue>
			
			interrupt_phase= RISSING_EDGGE;
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <interrupt_phase>
	}
	
	else 
	u8_MotorErrorStatus=E_NOK;
	return  u8_MotorErrorStatus;
}
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	08 95       	ret

000002fa <__vector_3>:


MY_ISR(INT2_vect){
 2fa:	1f 92       	push	r1
 2fc:	0f 92       	push	r0
 2fe:	0f b6       	in	r0, 0x3f	; 63
 300:	0f 92       	push	r0
 302:	11 24       	eor	r1, r1
 304:	2f 93       	push	r18
 306:	3f 93       	push	r19
 308:	4f 93       	push	r20
 30a:	5f 93       	push	r21
 30c:	6f 93       	push	r22
 30e:	7f 93       	push	r23
 310:	8f 93       	push	r24
 312:	9f 93       	push	r25
 314:	af 93       	push	r26
 316:	bf 93       	push	r27
 318:	ef 93       	push	r30
 31a:	ff 93       	push	r31
	switch (interrupt_phase){
 31c:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <interrupt_phase>
 320:	81 30       	cpi	r24, 0x01	; 1
 322:	19 f0       	breq	.+6      	; 0x32a <__vector_3+0x30>
 324:	82 30       	cpi	r24, 0x02	; 2
 326:	a1 f0       	breq	.+40     	; 0x350 <__vector_3+0x56>
 328:	23 c0       	rjmp	.+70     	; 0x370 <__vector_3+0x76>
		case RISSING_EDGGE:
		Timer_Start(TimerCH,TIMER_COUNT_NU );
 32a:	6f ef       	ldi	r22, 0xFF	; 255
 32c:	70 e0       	ldi	r23, 0x00	; 0
 32e:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 332:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <Timer_Start>
		CLEAR_BIT(GICR, INT2_INTER_BIT);
 336:	8b b7       	in	r24, 0x3b	; 59
 338:	8f 7d       	andi	r24, 0xDF	; 223
 33a:	8b bf       	out	0x3b, r24	; 59
		CLEAR_BIT(MCUCSR,SWICU_EDGE_MASK);
 33c:	84 b7       	in	r24, 0x34	; 52
 33e:	8f 7b       	andi	r24, 0xBF	; 191
 340:	84 bf       	out	0x34, r24	; 52
		 SET_BIT(GICR, INT2_INTER_BIT);
 342:	8b b7       	in	r24, 0x3b	; 59
 344:	80 62       	ori	r24, 0x20	; 32
 346:	8b bf       	out	0x3b, r24	; 59
		interrupt_phase=FALLING_EDGGE;
 348:	82 e0       	ldi	r24, 0x02	; 2
 34a:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <interrupt_phase>
	
		break;
 34e:	10 c0       	rjmp	.+32     	; 0x370 <__vector_3+0x76>
		
		case FALLING_EDGGE:
		Timer_Stop(TimerCH);
 350:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 354:	0e 94 21 04 	call	0x842	; 0x842 <Timer_Stop>
		CLEAR_BIT(GICR, INT2_INTER_BIT);
 358:	8b b7       	in	r24, 0x3b	; 59
 35a:	8f 7d       	andi	r24, 0xDF	; 223
 35c:	8b bf       	out	0x3b, r24	; 59
		SET_BIT(MCUCSR,SWICU_EDGE_MASK);
 35e:	84 b7       	in	r24, 0x34	; 52
 360:	80 64       	ori	r24, 0x40	; 64
 362:	84 bf       	out	0x34, r24	; 52
		SET_BIT(GICR, INT2_INTER_BIT);
 364:	8b b7       	in	r24, 0x3b	; 59
 366:	80 62       	ori	r24, 0x20	; 32
 368:	8b bf       	out	0x3b, r24	; 59
		interrupt_phase=STOP_INERE;
 36a:	83 e0       	ldi	r24, 0x03	; 3
 36c:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <interrupt_phase>
		break;
	}
 370:	ff 91       	pop	r31
 372:	ef 91       	pop	r30
 374:	bf 91       	pop	r27
 376:	af 91       	pop	r26
 378:	9f 91       	pop	r25
 37a:	8f 91       	pop	r24
 37c:	7f 91       	pop	r23
 37e:	6f 91       	pop	r22
 380:	5f 91       	pop	r21
 382:	4f 91       	pop	r20
 384:	3f 91       	pop	r19
 386:	2f 91       	pop	r18
 388:	0f 90       	pop	r0
 38a:	0f be       	out	0x3f, r0	; 63
 38c:	0f 90       	pop	r0
 38e:	1f 90       	pop	r1
 390:	18 95       	reti

00000392 <main>:
#include "car_sm.h"



int main(){
	 Car_SM_Init();
 392:	0e 94 49 00 	call	0x92	; 0x92 <Car_SM_Init>
	 while (1){
		  Car_SM_Update();
 396:	0e 94 53 00 	call	0xa6	; 0xa6 <Car_SM_Update>
 39a:	fd cf       	rjmp	.-6      	; 0x396 <main+0x4>

0000039c <Motor_Init>:
		default:
		u8_MotorErrorStatus=E_NOK;
		break;
	}
	return u8_MotorErrorStatus;
}
 39c:	81 30       	cpi	r24, 0x01	; 1
 39e:	19 f0       	breq	.+6      	; 0x3a6 <Motor_Init+0xa>
 3a0:	82 30       	cpi	r24, 0x02	; 2
 3a2:	51 f0       	breq	.+20     	; 0x3b8 <Motor_Init+0x1c>
 3a4:	12 c0       	rjmp	.+36     	; 0x3ca <Motor_Init+0x2e>
 3a6:	8f e6       	ldi	r24, 0x6F	; 111
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	0e 94 8b 00 	call	0x116	; 0x116 <DIO_init>
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <Motor1_InitFlag>
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	08 95       	ret
 3b8:	8c e6       	ldi	r24, 0x6C	; 108
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	0e 94 8b 00 	call	0x116	; 0x116 <DIO_init>
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <Motor2_InitFlag>
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	08 95       	ret
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	08 95       	ret

000003ce <Motor_Direction>:
 3ce:	81 30       	cpi	r24, 0x01	; 1
 3d0:	19 f0       	breq	.+6      	; 0x3d8 <Motor_Direction+0xa>
 3d2:	82 30       	cpi	r24, 0x02	; 2
 3d4:	59 f1       	breq	.+86     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 3d6:	54 c0       	rjmp	.+168    	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 3d8:	61 30       	cpi	r22, 0x01	; 1
 3da:	81 f0       	breq	.+32     	; 0x3fc <Motor_Direction+0x2e>
 3dc:	18 f0       	brcs	.+6      	; 0x3e4 <Motor_Direction+0x16>
 3de:	62 30       	cpi	r22, 0x02	; 2
 3e0:	c9 f0       	breq	.+50     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3e2:	50 c0       	rjmp	.+160    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 3e4:	40 e0       	ldi	r20, 0x00	; 0
 3e6:	64 e0       	ldi	r22, 0x04	; 4
 3e8:	83 e0       	ldi	r24, 0x03	; 3
 3ea:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_Write>
 3ee:	40 e0       	ldi	r20, 0x00	; 0
 3f0:	68 e0       	ldi	r22, 0x08	; 8
 3f2:	83 e0       	ldi	r24, 0x03	; 3
 3f4:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_Write>
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	08 95       	ret
 3fc:	4f ef       	ldi	r20, 0xFF	; 255
 3fe:	64 e0       	ldi	r22, 0x04	; 4
 400:	83 e0       	ldi	r24, 0x03	; 3
 402:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_Write>
 406:	40 e0       	ldi	r20, 0x00	; 0
 408:	68 e0       	ldi	r22, 0x08	; 8
 40a:	83 e0       	ldi	r24, 0x03	; 3
 40c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_Write>
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	08 95       	ret
 414:	40 e0       	ldi	r20, 0x00	; 0
 416:	64 e0       	ldi	r22, 0x04	; 4
 418:	83 e0       	ldi	r24, 0x03	; 3
 41a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_Write>
 41e:	4f ef       	ldi	r20, 0xFF	; 255
 420:	68 e0       	ldi	r22, 0x08	; 8
 422:	83 e0       	ldi	r24, 0x03	; 3
 424:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_Write>
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	08 95       	ret
 42c:	61 30       	cpi	r22, 0x01	; 1
 42e:	81 f0       	breq	.+32     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 430:	18 f0       	brcs	.+6      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 432:	62 30       	cpi	r22, 0x02	; 2
 434:	c9 f0       	breq	.+50     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 436:	28 c0       	rjmp	.+80     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 438:	40 e0       	ldi	r20, 0x00	; 0
 43a:	60 e4       	ldi	r22, 0x40	; 64
 43c:	83 e0       	ldi	r24, 0x03	; 3
 43e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_Write>
 442:	40 e0       	ldi	r20, 0x00	; 0
 444:	60 e8       	ldi	r22, 0x80	; 128
 446:	83 e0       	ldi	r24, 0x03	; 3
 448:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_Write>
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	08 95       	ret
 450:	4f ef       	ldi	r20, 0xFF	; 255
 452:	60 e4       	ldi	r22, 0x40	; 64
 454:	83 e0       	ldi	r24, 0x03	; 3
 456:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_Write>
 45a:	40 e0       	ldi	r20, 0x00	; 0
 45c:	60 e8       	ldi	r22, 0x80	; 128
 45e:	83 e0       	ldi	r24, 0x03	; 3
 460:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_Write>
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	08 95       	ret
 468:	40 e0       	ldi	r20, 0x00	; 0
 46a:	60 e4       	ldi	r22, 0x40	; 64
 46c:	83 e0       	ldi	r24, 0x03	; 3
 46e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_Write>
 472:	4f ef       	ldi	r20, 0xFF	; 255
 474:	60 e8       	ldi	r22, 0x80	; 128
 476:	83 e0       	ldi	r24, 0x03	; 3
 478:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_Write>
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	08 95       	ret
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	08 95       	ret
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	08 95       	ret
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	08 95       	ret

0000048c <Motor_Start>:
 48c:	cf 93       	push	r28
 48e:	c6 2f       	mov	r28, r22
 490:	81 30       	cpi	r24, 0x01	; 1
 492:	19 f0       	breq	.+6      	; 0x49a <Motor_Start+0xe>
 494:	82 30       	cpi	r24, 0x02	; 2
 496:	79 f0       	breq	.+30     	; 0x4b6 <Motor_Start+0x2a>
 498:	1c c0       	rjmp	.+56     	; 0x4d2 <Motor_Start+0x46>
 49a:	8a e6       	ldi	r24, 0x6A	; 106
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	0e 94 8b 02 	call	0x516	; 0x516 <Pwm_Init>
 4a2:	24 e6       	ldi	r18, 0x64	; 100
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	40 e0       	ldi	r20, 0x00	; 0
 4a8:	50 e0       	ldi	r21, 0x00	; 0
 4aa:	6c 2f       	mov	r22, r28
 4ac:	82 e0       	ldi	r24, 0x02	; 2
 4ae:	0e 94 ce 02 	call	0x59c	; 0x59c <Pwm_Start>
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	0f c0       	rjmp	.+30     	; 0x4d4 <Motor_Start+0x48>
 4b6:	88 e6       	ldi	r24, 0x68	; 104
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	0e 94 8b 02 	call	0x516	; 0x516 <Pwm_Init>
 4be:	24 e6       	ldi	r18, 0x64	; 100
 4c0:	30 e0       	ldi	r19, 0x00	; 0
 4c2:	40 e0       	ldi	r20, 0x00	; 0
 4c4:	50 e0       	ldi	r21, 0x00	; 0
 4c6:	6c 2f       	mov	r22, r28
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	0e 94 ce 02 	call	0x59c	; 0x59c <Pwm_Start>
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	01 c0       	rjmp	.+2      	; 0x4d4 <Motor_Start+0x48>
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	cf 91       	pop	r28
 4d6:	08 95       	ret

000004d8 <Motor_Stop>:
u8_ERROR_STATUS_t Motor_Stop(uint8_t u8_Motor_Number){
	uint8_t u8_MotorErrorStatus;
	switch (u8_Motor_Number){
 4d8:	81 30       	cpi	r24, 0x01	; 1
 4da:	19 f0       	breq	.+6      	; 0x4e2 <Motor_Stop+0xa>
 4dc:	82 30       	cpi	r24, 0x02	; 2
 4de:	69 f0       	breq	.+26     	; 0x4fa <Motor_Stop+0x22>
 4e0:	18 c0       	rjmp	.+48     	; 0x512 <Motor_Stop+0x3a>
		case MOTOR_1 :
			DIO_Write (MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,LOW);
 4e2:	40 e0       	ldi	r20, 0x00	; 0
 4e4:	64 e0       	ldi	r22, 0x04	; 4
 4e6:	83 e0       	ldi	r24, 0x03	; 3
 4e8:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_Write>
			DIO_Write (MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
 4ec:	40 e0       	ldi	r20, 0x00	; 0
 4ee:	68 e0       	ldi	r22, 0x08	; 8
 4f0:	83 e0       	ldi	r24, 0x03	; 3
 4f2:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_Write>
			u8_MotorErrorStatus=E_OK;
 4f6:	80 e0       	ldi	r24, 0x00	; 0
			break;
 4f8:	08 95       	ret
			case MOTOR_2 :
				DIO_Write (MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,LOW);
 4fa:	40 e0       	ldi	r20, 0x00	; 0
 4fc:	60 e4       	ldi	r22, 0x40	; 64
 4fe:	83 e0       	ldi	r24, 0x03	; 3
 500:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_Write>
				DIO_Write (MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
 504:	40 e0       	ldi	r20, 0x00	; 0
 506:	60 e8       	ldi	r22, 0x80	; 128
 508:	83 e0       	ldi	r24, 0x03	; 3
 50a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_Write>
				u8_MotorErrorStatus=E_OK;
 50e:	80 e0       	ldi	r24, 0x00	; 0
				break;
 510:	08 95       	ret
				default:
				u8_MotorErrorStatus=E_NOK;
 512:	81 e0       	ldi	r24, 0x01	; 1
				break;
	}
		return 	u8_MotorErrorStatus;
}
 514:	08 95       	ret

00000516 <Pwm_Init>:
static uint8_t u8_PWM_CH1A_Prescaler=0;
static uint8_t u8_PWM_CH1B_Prescaler=0;

extern u8_ERROR_STATUS_t Pwm_Init(gstr_Pwm_Cfg_t *psrt_Pwm_Cfg){
	
	if (psrt_Pwm_Cfg!=NULL){
 516:	00 97       	sbiw	r24, 0x00	; 0
 518:	c9 f1       	breq	.+114    	; 0x58c <Pwm_Init+0x76>
		switch (psrt_Pwm_Cfg->u8_Channel){
 51a:	fc 01       	movw	r30, r24
 51c:	20 81       	ld	r18, Z
 51e:	21 30       	cpi	r18, 0x01	; 1
 520:	19 f0       	breq	.+6      	; 0x528 <Pwm_Init+0x12>
 522:	22 30       	cpi	r18, 0x02	; 2
 524:	b1 f0       	breq	.+44     	; 0x552 <Pwm_Init+0x3c>
 526:	34 c0       	rjmp	.+104    	; 0x590 <Pwm_Init+0x7a>
			case  PWM_CH1A :
			

		    PORTD_DIR|=BIT5;
 528:	8d 9a       	sbi	0x11, 5	; 17
			//TCCR1A&=WRITE_TO_TCCRA  ;    
		    TCCR1A|=OCR1A_NON_INVERTING_MODE| PHASE_CORRECT_WG11_00BITS;
 52a:	2f b5       	in	r18, 0x2f	; 47
 52c:	22 68       	ori	r18, 0x82	; 130
 52e:	2f bd       	out	0x2f, r18	; 47
			TCCR1B|= PHASE_CORRECT_WG12_13BITS ;
 530:	2e b5       	in	r18, 0x2e	; 46
 532:	20 61       	ori	r18, 0x10	; 16
 534:	2e bd       	out	0x2e, r18	; 46
			
			switch(psrt_Pwm_Cfg->u8_Prescaler){
 536:	fc 01       	movw	r30, r24
 538:	81 81       	ldd	r24, Z+1	; 0x01
 53a:	83 30       	cpi	r24, 0x03	; 3
 53c:	39 f0       	breq	.+14     	; 0x54c <Pwm_Init+0x36>
 53e:	18 f4       	brcc	.+6      	; 0x546 <Pwm_Init+0x30>
 540:	82 30       	cpi	r24, 0x02	; 2
 542:	20 f0       	brcs	.+8      	; 0x54c <Pwm_Init+0x36>
 544:	27 c0       	rjmp	.+78     	; 0x594 <Pwm_Init+0x7e>
 546:	85 50       	subi	r24, 0x05	; 5
 548:	82 30       	cpi	r24, 0x02	; 2
 54a:	20 f5       	brcc	.+72     	; 0x594 <Pwm_Init+0x7e>
				u8_PWM_CH1A_Prescaler=TIMEr1_PRESCALER_1024;
				break;
				default: 
				return E_NOK;	
			}
			  PORTD_DIR|=BIT5;
 54c:	8d 9a       	sbi	0x11, 5	; 17
				
			break;
			default:
			return E_NOK;
		}
		return E_OK;
 54e:	80 e0       	ldi	r24, 0x00	; 0
				default: 
				return E_NOK;	
			}
			  PORTD_DIR|=BIT5;
			
			break;
 550:	08 95       	ret
			case PWM_CH1B:
			TCNT1=0;
 552:	1d bc       	out	0x2d, r1	; 45
 554:	1c bc       	out	0x2c, r1	; 44
			ICR1=0;
 556:	17 bc       	out	0x27, r1	; 39
 558:	16 bc       	out	0x26, r1	; 38
			OCR1B=0;
 55a:	19 bc       	out	0x29, r1	; 41
 55c:	18 bc       	out	0x28, r1	; 40
				PORTD_DIR|=BIT4;
 55e:	8c 9a       	sbi	0x11, 4	; 17
				TCCR1A&=WRITE_TO_TCCRA  ;
 560:	2f b5       	in	r18, 0x2f	; 47
 562:	23 7f       	andi	r18, 0xF3	; 243
 564:	2f bd       	out	0x2f, r18	; 47
				TCCR1A|=OCR1B_NON_INVERTING_MODE| PHASE_CORRECT_WG11_00BITS;
 566:	2f b5       	in	r18, 0x2f	; 47
 568:	22 62       	ori	r18, 0x22	; 34
 56a:	2f bd       	out	0x2f, r18	; 47
				TCCR1B|= PHASE_CORRECT_WG12_13BITS ;
 56c:	2e b5       	in	r18, 0x2e	; 46
 56e:	20 61       	ori	r18, 0x10	; 16
 570:	2e bd       	out	0x2e, r18	; 46
				
				switch(psrt_Pwm_Cfg->u8_Prescaler){
 572:	fc 01       	movw	r30, r24
 574:	81 81       	ldd	r24, Z+1	; 0x01
 576:	83 30       	cpi	r24, 0x03	; 3
 578:	39 f0       	breq	.+14     	; 0x588 <Pwm_Init+0x72>
 57a:	18 f4       	brcc	.+6      	; 0x582 <Pwm_Init+0x6c>
 57c:	82 30       	cpi	r24, 0x02	; 2
 57e:	20 f0       	brcs	.+8      	; 0x588 <Pwm_Init+0x72>
 580:	0b c0       	rjmp	.+22     	; 0x598 <Pwm_Init+0x82>
 582:	85 50       	subi	r24, 0x05	; 5
 584:	82 30       	cpi	r24, 0x02	; 2
 586:	40 f4       	brcc	.+16     	; 0x598 <Pwm_Init+0x82>
				
			break;
			default:
			return E_NOK;
		}
		return E_OK;
 588:	80 e0       	ldi	r24, 0x00	; 0
 58a:	08 95       	ret
	}
	else 
	return E_NOK;
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	08 95       	ret
					return E_NOK;
				}
				
			break;
			default:
			return E_NOK;
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	08 95       	ret
				break;
				case PWM_PRESCALER_1024:
				u8_PWM_CH1A_Prescaler=TIMEr1_PRESCALER_1024;
				break;
				default: 
				return E_NOK;	
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	08 95       	ret
					break;
					case PWM_PRESCALER_1024:
					u8_PWM_CH1B_Prescaler=TIMEr1_PRESCALER_1024;
					break;
					default:
					return E_NOK;
 598:	81 e0       	ldi	r24, 0x01	; 1
		}
		return E_OK;
	}
	else 
	return E_NOK;
}
 59a:	08 95       	ret

0000059c <Pwm_Start>:

extern u8_ERROR_STATUS_t Pwm_Start(uint8_t u8_Channel,uint8_t u8_Duty,uint32_t u32_Frequncy)
{
	switch (u8_Channel){
 59c:	81 30       	cpi	r24, 0x01	; 1
 59e:	19 f0       	breq	.+6      	; 0x5a6 <Pwm_Start+0xa>
 5a0:	82 30       	cpi	r24, 0x02	; 2
 5a2:	f9 f0       	breq	.+62     	; 0x5e2 <Pwm_Start+0x46>
 5a4:	3c c0       	rjmp	.+120    	; 0x61e <Pwm_Start+0x82>
		
		case PWM_CH1A:
		switch(u32_Frequncy){
 5a6:	24 36       	cpi	r18, 0x64	; 100
 5a8:	31 05       	cpc	r19, r1
 5aa:	41 05       	cpc	r20, r1
 5ac:	51 05       	cpc	r21, r1
 5ae:	c9 f5       	brne	.+114    	; 0x622 <Pwm_Start+0x86>
			
			case FREQ_100_:
			ICR1=FRE_100_ICR_;
 5b0:	8e e4       	ldi	r24, 0x4E	; 78
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	97 bd       	out	0x27, r25	; 39
 5b6:	86 bd       	out	0x26, r24	; 38
			OCR1A=((uint32_t) FRE_100_ICR_*u8_Duty)/100;
 5b8:	26 2f       	mov	r18, r22
 5ba:	30 e0       	ldi	r19, 0x00	; 0
 5bc:	ae e4       	ldi	r26, 0x4E	; 78
 5be:	b0 e0       	ldi	r27, 0x00	; 0
 5c0:	0e 94 b4 04 	call	0x968	; 0x968 <__umulhisi3>
 5c4:	24 e6       	ldi	r18, 0x64	; 100
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	40 e0       	ldi	r20, 0x00	; 0
 5ca:	50 e0       	ldi	r21, 0x00	; 0
 5cc:	0e 94 92 04 	call	0x924	; 0x924 <__udivmodsi4>
 5d0:	3b bd       	out	0x2b, r19	; 43
 5d2:	2a bd       	out	0x2a, r18	; 42
			TCCR1|=TIMEr1_PRESCALER_1024 ;
 5d4:	8e b5       	in	r24, 0x2e	; 46
 5d6:	9f b5       	in	r25, 0x2f	; 47
 5d8:	85 60       	ori	r24, 0x05	; 5
 5da:	9f bd       	out	0x2f, r25	; 47
 5dc:	8e bd       	out	0x2e, r24	; 46
		}
		break;	
		default:
		return E_NOK;
	}
	return E_OK;
 5de:	80 e0       	ldi	r24, 0x00	; 0
			break;
			default:
			return E_NOK;
		}
		
		break;
 5e0:	08 95       	ret
		
		case PWM_CH1B :
		switch(u32_Frequncy){
 5e2:	24 36       	cpi	r18, 0x64	; 100
 5e4:	31 05       	cpc	r19, r1
 5e6:	41 05       	cpc	r20, r1
 5e8:	51 05       	cpc	r21, r1
 5ea:	e9 f4       	brne	.+58     	; 0x626 <Pwm_Start+0x8a>
			
			case FREQ_100_:
			ICR1=FRE_100_ICR_;
 5ec:	8e e4       	ldi	r24, 0x4E	; 78
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	97 bd       	out	0x27, r25	; 39
 5f2:	86 bd       	out	0x26, r24	; 38
			OCR1B=((uint32_t) FRE_100_ICR_*u8_Duty)/100;
 5f4:	26 2f       	mov	r18, r22
 5f6:	30 e0       	ldi	r19, 0x00	; 0
 5f8:	ae e4       	ldi	r26, 0x4E	; 78
 5fa:	b0 e0       	ldi	r27, 0x00	; 0
 5fc:	0e 94 b4 04 	call	0x968	; 0x968 <__umulhisi3>
 600:	24 e6       	ldi	r18, 0x64	; 100
 602:	30 e0       	ldi	r19, 0x00	; 0
 604:	40 e0       	ldi	r20, 0x00	; 0
 606:	50 e0       	ldi	r21, 0x00	; 0
 608:	0e 94 92 04 	call	0x924	; 0x924 <__udivmodsi4>
 60c:	39 bd       	out	0x29, r19	; 41
 60e:	28 bd       	out	0x28, r18	; 40
			TCCR1|=TIMEr1_PRESCALER_1024 ;
 610:	8e b5       	in	r24, 0x2e	; 46
 612:	9f b5       	in	r25, 0x2f	; 47
 614:	85 60       	ori	r24, 0x05	; 5
 616:	9f bd       	out	0x2f, r25	; 47
 618:	8e bd       	out	0x2e, r24	; 46
		}
		break;	
		default:
		return E_NOK;
	}
	return E_OK;
 61a:	80 e0       	ldi	r24, 0x00	; 0
			TCCR1|=TIMEr1_PRESCALER_1024 ;
			break;
			default:
			return E_NOK;
		}
		break;	
 61c:	08 95       	ret
		default:
		return E_NOK;
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	08 95       	ret
			ICR1=FRE_100_ICR_;
			OCR1A=((uint32_t) FRE_100_ICR_*u8_Duty)/100;
			TCCR1|=TIMEr1_PRESCALER_1024 ;
			break;
			default:
			return E_NOK;
 622:	81 e0       	ldi	r24, 0x01	; 1
 624:	08 95       	ret
			ICR1=FRE_100_ICR_;
			OCR1B=((uint32_t) FRE_100_ICR_*u8_Duty)/100;
			TCCR1|=TIMEr1_PRESCALER_1024 ;
			break;
			default:
			return E_NOK;
 626:	81 e0       	ldi	r24, 0x01	; 1
		break;	
		default:
		return E_NOK;
	}
	return E_OK;
}
 628:	08 95       	ret

0000062a <softwareDelayMs>:
 *
 * Created: 18/01/2020 12:25:22 ุต
 *  Author: TOSHIBA
 */ 
#include "softwareDelay.h"
void softwareDelayMs(uint32_t u32_delay_in_ms){
 62a:	ab 01       	movw	r20, r22
 62c:	bc 01       	movw	r22, r24
	uint32_t  s=0;
	for(;u32_delay_in_ms;u32_delay_in_ms--){
 62e:	41 15       	cp	r20, r1
 630:	51 05       	cpc	r21, r1
 632:	61 05       	cpc	r22, r1
 634:	71 05       	cpc	r23, r1
 636:	59 f4       	brne	.+22     	; 0x64e <softwareDelayMs+0x24>
 638:	08 95       	ret
 63a:	01 96       	adiw	r24, 0x01	; 1
		        s=0;
		for (;s<2285; ){
 63c:	8d 3e       	cpi	r24, 0xED	; 237
 63e:	28 e0       	ldi	r18, 0x08	; 8
 640:	92 07       	cpc	r25, r18
 642:	d9 f7       	brne	.-10     	; 0x63a <softwareDelayMs+0x10>
 *  Author: TOSHIBA
 */ 
#include "softwareDelay.h"
void softwareDelayMs(uint32_t u32_delay_in_ms){
	uint32_t  s=0;
	for(;u32_delay_in_ms;u32_delay_in_ms--){
 644:	41 50       	subi	r20, 0x01	; 1
 646:	51 09       	sbc	r21, r1
 648:	61 09       	sbc	r22, r1
 64a:	71 09       	sbc	r23, r1
 64c:	19 f0       	breq	.+6      	; 0x654 <softwareDelayMs+0x2a>
 *
 * Created: 18/01/2020 12:25:22 ุต
 *  Author: TOSHIBA
 */ 
#include "softwareDelay.h"
void softwareDelayMs(uint32_t u32_delay_in_ms){
 64e:	80 e0       	ldi	r24, 0x00	; 0
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	f3 cf       	rjmp	.-26     	; 0x63a <softwareDelayMs+0x10>
 654:	08 95       	ret

00000656 <Steering_Init>:
 */ 

#include "motor.h"
#include "Steering.h"
u8_ERROR_STATUS_t Steering_Init(void){
	Motor_Init(MOTOR_1);
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	0e 94 ce 01 	call	0x39c	; 0x39c <Motor_Init>
	Motor_Init(MOTOR_2);
 65c:	82 e0       	ldi	r24, 0x02	; 2
 65e:	0e 94 ce 01 	call	0x39c	; 0x39c <Motor_Init>
	return E_OK;
}
 662:	80 e0       	ldi	r24, 0x00	; 0
 664:	08 95       	ret

00000666 <Steering_SteerCar>:
u8_ERROR_STATUS_t Steering_SteerCar(uint8_t u8_Steering_CarCmd, uint8_t u8_speed){
 666:	cf 93       	push	r28
 668:	c6 2f       	mov	r28, r22
	uint8_t u8_MotorErrorStatus;
	switch(u8_Steering_CarCmd){
 66a:	82 30       	cpi	r24, 0x02	; 2
 66c:	31 f1       	breq	.+76     	; 0x6ba <Steering_SteerCar+0x54>
 66e:	28 f4       	brcc	.+10     	; 0x67a <Steering_SteerCar+0x14>
 670:	88 23       	and	r24, r24
 672:	49 f0       	breq	.+18     	; 0x686 <Steering_SteerCar+0x20>
 674:	81 30       	cpi	r24, 0x01	; 1
 676:	79 f0       	breq	.+30     	; 0x696 <Steering_SteerCar+0x30>
 678:	56 c0       	rjmp	.+172    	; 0x726 <Steering_SteerCar+0xc0>
 67a:	83 30       	cpi	r24, 0x03	; 3
 67c:	81 f1       	breq	.+96     	; 0x6de <Steering_SteerCar+0x78>
 67e:	84 30       	cpi	r24, 0x04	; 4
 680:	09 f4       	brne	.+2      	; 0x684 <Steering_SteerCar+0x1e>
 682:	3f c0       	rjmp	.+126    	; 0x702 <Steering_SteerCar+0x9c>
 684:	50 c0       	rjmp	.+160    	; 0x726 <Steering_SteerCar+0xc0>
		
		case CAR_STOP :
	   Motor_Stop(MOTOR_1);
 686:	81 e0       	ldi	r24, 0x01	; 1
 688:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <Motor_Stop>
	   Motor_Stop(MOTOR_2);
 68c:	82 e0       	ldi	r24, 0x02	; 2
 68e:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <Motor_Stop>
	   u8_MotorErrorStatus=E_OK;
 692:	80 e0       	ldi	r24, 0x00	; 0
		break;
 694:	49 c0       	rjmp	.+146    	; 0x728 <Steering_SteerCar+0xc2>
		
		case  CAR_FORWARD:
			Motor_Direction(MOTOR_1,MOTOR_FORWARD);
 696:	61 e0       	ldi	r22, 0x01	; 1
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	0e 94 e7 01 	call	0x3ce	; 0x3ce <Motor_Direction>
			Motor_Direction(MOTOR_2,MOTOR_FORWARD);
 69e:	61 e0       	ldi	r22, 0x01	; 1
 6a0:	82 e0       	ldi	r24, 0x02	; 2
 6a2:	0e 94 e7 01 	call	0x3ce	; 0x3ce <Motor_Direction>
			Motor_Start(MOTOR_1,u8_speed);
 6a6:	6c 2f       	mov	r22, r28
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	0e 94 46 02 	call	0x48c	; 0x48c <Motor_Start>
			Motor_Start(MOTOR_2,u8_speed);
 6ae:	6c 2f       	mov	r22, r28
 6b0:	82 e0       	ldi	r24, 0x02	; 2
 6b2:	0e 94 46 02 	call	0x48c	; 0x48c <Motor_Start>
			u8_MotorErrorStatus=E_OK;
 6b6:	80 e0       	ldi	r24, 0x00	; 0
		break;
 6b8:	37 c0       	rjmp	.+110    	; 0x728 <Steering_SteerCar+0xc2>
		
		case  CAR_BACKWARD :
		Motor_Direction(MOTOR_1,MOTOR_BACKWARD);
 6ba:	62 e0       	ldi	r22, 0x02	; 2
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	0e 94 e7 01 	call	0x3ce	; 0x3ce <Motor_Direction>
		Motor_Direction(MOTOR_2,MOTOR_BACKWARD);
 6c2:	62 e0       	ldi	r22, 0x02	; 2
 6c4:	82 e0       	ldi	r24, 0x02	; 2
 6c6:	0e 94 e7 01 	call	0x3ce	; 0x3ce <Motor_Direction>
		Motor_Start(MOTOR_1,u8_speed);
 6ca:	6c 2f       	mov	r22, r28
 6cc:	81 e0       	ldi	r24, 0x01	; 1
 6ce:	0e 94 46 02 	call	0x48c	; 0x48c <Motor_Start>
		Motor_Start(MOTOR_2,u8_speed);
 6d2:	6c 2f       	mov	r22, r28
 6d4:	82 e0       	ldi	r24, 0x02	; 2
 6d6:	0e 94 46 02 	call	0x48c	; 0x48c <Motor_Start>
		u8_MotorErrorStatus=E_OK;
 6da:	80 e0       	ldi	r24, 0x00	; 0
		break;
 6dc:	25 c0       	rjmp	.+74     	; 0x728 <Steering_SteerCar+0xc2>
		
		case CAR_RIGHT :
		Motor_Direction(MOTOR_1,MOTOR_FORWARD);
 6de:	61 e0       	ldi	r22, 0x01	; 1
 6e0:	81 e0       	ldi	r24, 0x01	; 1
 6e2:	0e 94 e7 01 	call	0x3ce	; 0x3ce <Motor_Direction>
		Motor_Direction(MOTOR_2,MOTOR_BACKWARD);
 6e6:	62 e0       	ldi	r22, 0x02	; 2
 6e8:	82 e0       	ldi	r24, 0x02	; 2
 6ea:	0e 94 e7 01 	call	0x3ce	; 0x3ce <Motor_Direction>
		Motor_Start(MOTOR_1,u8_speed);
 6ee:	6c 2f       	mov	r22, r28
 6f0:	81 e0       	ldi	r24, 0x01	; 1
 6f2:	0e 94 46 02 	call	0x48c	; 0x48c <Motor_Start>
		Motor_Start(MOTOR_2,u8_speed);
 6f6:	6c 2f       	mov	r22, r28
 6f8:	82 e0       	ldi	r24, 0x02	; 2
 6fa:	0e 94 46 02 	call	0x48c	; 0x48c <Motor_Start>
		u8_MotorErrorStatus=E_OK;
 6fe:	80 e0       	ldi	r24, 0x00	; 0
		break;
 700:	13 c0       	rjmp	.+38     	; 0x728 <Steering_SteerCar+0xc2>
		
		case CAR_LEFT:
		Motor_Direction(MOTOR_1,MOTOR_BACKWARD);
 702:	62 e0       	ldi	r22, 0x02	; 2
 704:	81 e0       	ldi	r24, 0x01	; 1
 706:	0e 94 e7 01 	call	0x3ce	; 0x3ce <Motor_Direction>
		Motor_Direction(MOTOR_2,MOTOR_FORWARD);
 70a:	61 e0       	ldi	r22, 0x01	; 1
 70c:	82 e0       	ldi	r24, 0x02	; 2
 70e:	0e 94 e7 01 	call	0x3ce	; 0x3ce <Motor_Direction>
		Motor_Start(MOTOR_1,u8_speed);
 712:	6c 2f       	mov	r22, r28
 714:	81 e0       	ldi	r24, 0x01	; 1
 716:	0e 94 46 02 	call	0x48c	; 0x48c <Motor_Start>
		Motor_Start(MOTOR_2,u8_speed);
 71a:	6c 2f       	mov	r22, r28
 71c:	82 e0       	ldi	r24, 0x02	; 2
 71e:	0e 94 46 02 	call	0x48c	; 0x48c <Motor_Start>
		u8_MotorErrorStatus=E_OK;
 722:	80 e0       	ldi	r24, 0x00	; 0
		break;
 724:	01 c0       	rjmp	.+2      	; 0x728 <Steering_SteerCar+0xc2>
		
		default:
		u8_MotorErrorStatus=E_NOK;
 726:	81 e0       	ldi	r24, 0x01	; 1
		break;	
		
	}
	return u8_MotorErrorStatus;
 728:	cf 91       	pop	r28
 72a:	08 95       	ret

0000072c <Timer_Init>:
static uint8_t gu8_PrescalerTimer2=0;




extern uint8_t Timer_Init(gstrTimerConfig_t* pstrTimerConf){
 72c:	fc 01       	movw	r30, r24
	if(pstrTimerConf!=NULL){
 72e:	89 2b       	or	r24, r25
 730:	09 f4       	brne	.+2      	; 0x734 <Timer_Init+0x8>
 732:	4a c0       	rjmp	.+148    	; 0x7c8 <Timer_Init+0x9c>
		switch(pstrTimerConf->u8_TimerCh){
 734:	80 81       	ld	r24, Z
 736:	81 30       	cpi	r24, 0x01	; 1
 738:	c1 f0       	breq	.+48     	; 0x76a <Timer_Init+0x3e>
 73a:	18 f0       	brcs	.+6      	; 0x742 <Timer_Init+0x16>
 73c:	82 30       	cpi	r24, 0x02	; 2
 73e:	71 f1       	breq	.+92     	; 0x79c <Timer_Init+0x70>
 740:	45 c0       	rjmp	.+138    	; 0x7cc <Timer_Init+0xa0>
			case TIMER_CH_0:
			TCCR0=0x00;
 742:	13 be       	out	0x33, r1	; 51
			TCNT0=0x00;
 744:	12 be       	out	0x32, r1	; 50
			SET_BIT(TIFR,TIMER0_TOV0_BIT);
 746:	98 b7       	in	r25, 0x38	; 56
 748:	91 60       	ori	r25, 0x01	; 1
 74a:	98 bf       	out	0x38, r25	; 56
			TCCR0|=TIMER0_NORMAL_MODE;
 74c:	93 b7       	in	r25, 0x33	; 51
 74e:	93 bf       	out	0x33, r25	; 51
			if(pstrTimerConf->u8_Timer_INT_Mode==TIMER_MODE_INT)
 750:	93 81       	ldd	r25, Z+3	; 0x03
 752:	91 11       	cpse	r25, r1
 754:	06 c0       	rjmp	.+12     	; 0x762 <Timer_Init+0x36>
			{
				 TIMSK|=TIMER0_INTERRUPT_NORMAL;
 756:	99 b7       	in	r25, 0x39	; 57
 758:	91 60       	ori	r25, 0x01	; 1
 75a:	99 bf       	out	0x39, r25	; 57
				 SET_BIT(SREG,GENERAL_INTERRUPT_BIT);
 75c:	9f b7       	in	r25, 0x3f	; 63
 75e:	90 68       	ori	r25, 0x80	; 128
 760:	9f bf       	out	0x3f, r25	; 63
// 				break;
// 				case COUNTER_MODE_RISSING_EDGE:
// 				TCCR0|= COUNTER_RISSING_EDGE;
// 				break;
// 			}
			gu8_PrescalerTimer0=pstrTimerConf->u8_TimerPrescaler;
 762:	92 81       	ldd	r25, Z+2	; 0x02
 764:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <gu8_PrescalerTimer0>
			break;
 768:	08 95       	ret
			
			
			case TIMER_CH_1 :
			 TCCR1=0;
 76a:	1f bc       	out	0x2f, r1	; 47
 76c:	1e bc       	out	0x2e, r1	; 46
			 TCNT1=0;
 76e:	1d bc       	out	0x2d, r1	; 45
 770:	1c bc       	out	0x2c, r1	; 44
			 SET_BIT(TIFR,TIMER1_TOV1_BIT);
 772:	88 b7       	in	r24, 0x38	; 56
 774:	84 60       	ori	r24, 0x04	; 4
 776:	88 bf       	out	0x38, r24	; 56
			  TCCR1 |=TIMER1_NORMAL_MODE;
 778:	8e b5       	in	r24, 0x2e	; 46
 77a:	9f b5       	in	r25, 0x2f	; 47
 77c:	9f bd       	out	0x2f, r25	; 47
 77e:	8e bd       	out	0x2e, r24	; 46
			if(pstrTimerConf->u8_Timer_INT_Mode==TIMER_MODE_INT)
 780:	83 81       	ldd	r24, Z+3	; 0x03
 782:	81 11       	cpse	r24, r1
 784:	06 c0       	rjmp	.+12     	; 0x792 <Timer_Init+0x66>
			{
				TIMSK|=TIMER1_INTERRUPT_NORMAL;
 786:	89 b7       	in	r24, 0x39	; 57
 788:	84 60       	ori	r24, 0x04	; 4
 78a:	89 bf       	out	0x39, r24	; 57
				SET_BIT(SREG,GENERAL_INTERRUPT_BIT);
 78c:	8f b7       	in	r24, 0x3f	; 63
 78e:	80 68       	ori	r24, 0x80	; 128
 790:	8f bf       	out	0x3f, r24	; 63
// 				break;
// 				case COUNTER_MODE_RISSING_EDGE:
// 				TCCR0|= COUNTER_RISSING_EDGE;
// 				break;
// 			}
			gu8_PrescalerTimer1=pstrTimerConf->u8_TimerPrescaler;
 792:	82 81       	ldd	r24, Z+2	; 0x02
 794:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <gu8_PrescalerTimer1>
			break;
			
			default:
			return E_NOK;
 		}
		return E_OK ; 
 798:	80 e0       	ldi	r24, 0x00	; 0
// 				case COUNTER_MODE_RISSING_EDGE:
// 				TCCR0|= COUNTER_RISSING_EDGE;
// 				break;
// 			}
			gu8_PrescalerTimer1=pstrTimerConf->u8_TimerPrescaler;
			break;
 79a:	08 95       	ret
// 			
			case TIMER_CH_2 :
				TCCR2=0x00;
 79c:	15 bc       	out	0x25, r1	; 37
				TCNT2=0x00;
 79e:	14 bc       	out	0x24, r1	; 36
				ASSR=0;
 7a0:	12 bc       	out	0x22, r1	; 34
				SET_BIT(TIFR,TIMER2_TOV2_BIT);
 7a2:	88 b7       	in	r24, 0x38	; 56
 7a4:	80 64       	ori	r24, 0x40	; 64
 7a6:	88 bf       	out	0x38, r24	; 56
				TCCR2|=TIMER2_NORMAL_MODE;
 7a8:	85 b5       	in	r24, 0x25	; 37
 7aa:	85 bd       	out	0x25, r24	; 37
				if(pstrTimerConf->u8_Timer_INT_Mode==TIMER_MODE_INT)
 7ac:	83 81       	ldd	r24, Z+3	; 0x03
 7ae:	81 11       	cpse	r24, r1
 7b0:	06 c0       	rjmp	.+12     	; 0x7be <Timer_Init+0x92>
				{
					TIMSK|=TIMER2_INTERRUPT_NORMAL;
 7b2:	89 b7       	in	r24, 0x39	; 57
 7b4:	80 64       	ori	r24, 0x40	; 64
 7b6:	89 bf       	out	0x39, r24	; 57
					SET_BIT(SREG,GENERAL_INTERRUPT_BIT);
 7b8:	8f b7       	in	r24, 0x3f	; 63
 7ba:	80 68       	ori	r24, 0x80	; 128
 7bc:	8f bf       	out	0x3f, r24	; 63
				}
// 				switch (pstrTimerConf->u8_TimerMode)
// 				{
// 					//NOT handle it ASSR 
// 				}
				gu8_PrescalerTimer2=pstrTimerConf->u8_TimerPrescaler;
 7be:	82 81       	ldd	r24, Z+2	; 0x02
 7c0:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <gu8_PrescalerTimer2>
			break;
			
			default:
			return E_NOK;
 		}
		return E_OK ; 
 7c4:	80 e0       	ldi	r24, 0x00	; 0
// 				switch (pstrTimerConf->u8_TimerMode)
// 				{
// 					//NOT handle it ASSR 
// 				}
				gu8_PrescalerTimer2=pstrTimerConf->u8_TimerPrescaler;
				break;
 7c6:	08 95       	ret
 		}
		return E_OK ; 
		
	}
	else 
	return E_NOK ;
 7c8:	81 e0       	ldi	r24, 0x01	; 1
 7ca:	08 95       	ret
				break;
				
			break;
			
			default:
			return E_NOK;
 7cc:	81 e0       	ldi	r24, 0x01	; 1
		return E_OK ; 
		
	}
	else 
	return E_NOK ;
}
 7ce:	08 95       	ret

000007d0 <Timer_Start>:

extern uint8_t Timer_Start (uint8_t u8_TimerCh,uint16_t u16_CountNO){
	uint8_t u8_register_status=0;
	switch(u8_TimerCh){
 7d0:	81 30       	cpi	r24, 0x01	; 1
 7d2:	89 f0       	breq	.+34     	; 0x7f6 <Timer_Start+0x26>
 7d4:	18 f0       	brcs	.+6      	; 0x7dc <Timer_Start+0xc>
 7d6:	82 30       	cpi	r24, 0x02	; 2
 7d8:	09 f1       	breq	.+66     	; 0x81c <Timer_Start+0x4c>
 7da:	2d c0       	rjmp	.+90     	; 0x836 <Timer_Start+0x66>
		case  TIMER_CH_0 :
		if (u16_CountNO<=255){
 7dc:	6f 3f       	cpi	r22, 0xFF	; 255
 7de:	71 05       	cpc	r23, r1
 7e0:	09 f0       	breq	.+2      	; 0x7e4 <Timer_Start+0x14>
 7e2:	58 f5       	brcc	.+86     	; 0x83a <Timer_Start+0x6a>
			
		TCNT0=(TIMER0_RESLUTION-u16_CountNO);
 7e4:	60 95       	com	r22
 7e6:	62 bf       	out	0x32, r22	; 50
		TCCR0|=	gu8_PrescalerTimer0;// not handle
 7e8:	93 b7       	in	r25, 0x33	; 51
 7ea:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <gu8_PrescalerTimer0>
 7ee:	89 2b       	or	r24, r25
 7f0:	83 bf       	out	0x33, r24	; 51
		return E_NOK;
		break;
		default:
		return E_NOK;
	}
	return E_OK;
 7f2:	80 e0       	ldi	r24, 0x00	; 0
		TCCR0|=	gu8_PrescalerTimer0;// not handle
		}
		
		else
		 return E_NOK;
		break;
 7f4:	08 95       	ret
		
		case TIMER_CH_1:
		 u8_register_status=TIMSK;
 7f6:	99 b7       	in	r25, 0x39	; 57
		TIMSK&=TIMER1_MASK_DIS_EN_I ;
 7f8:	89 b7       	in	r24, 0x39	; 57
 7fa:	83 7c       	andi	r24, 0xC3	; 195
 7fc:	89 bf       	out	0x39, r24	; 57
		TCNT1 =(TIMER1_RESLUTION-u16_CountNO);
 7fe:	71 95       	neg	r23
 800:	61 95       	neg	r22
 802:	71 09       	sbc	r23, r1
 804:	7d bd       	out	0x2d, r23	; 45
 806:	6c bd       	out	0x2c, r22	; 44
		TIMSK=u8_register_status;
 808:	99 bf       	out	0x39, r25	; 57
		TCCR1|=gu8_PrescalerTimer1;
 80a:	8e b5       	in	r24, 0x2e	; 46
 80c:	9f b5       	in	r25, 0x2f	; 47
 80e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <gu8_PrescalerTimer1>
 812:	82 2b       	or	r24, r18
 814:	9f bd       	out	0x2f, r25	; 47
 816:	8e bd       	out	0x2e, r24	; 46
		return E_NOK;
		break;
		default:
		return E_NOK;
	}
	return E_OK;
 818:	80 e0       	ldi	r24, 0x00	; 0
		 u8_register_status=TIMSK;
		TIMSK&=TIMER1_MASK_DIS_EN_I ;
		TCNT1 =(TIMER1_RESLUTION-u16_CountNO);
		TIMSK=u8_register_status;
		TCCR1|=gu8_PrescalerTimer1;
			break;
 81a:	08 95       	ret
		
		
		case  TIMER_CH_2:
		if (u16_CountNO<=255){//there is special case if the timer is in counter mode not handle 
 81c:	6f 3f       	cpi	r22, 0xFF	; 255
 81e:	71 05       	cpc	r23, r1
 820:	09 f0       	breq	.+2      	; 0x824 <Timer_Start+0x54>
 822:	68 f4       	brcc	.+26     	; 0x83e <Timer_Start+0x6e>
			
			TCNT2=(TIMER0_RESLUTION-u16_CountNO);
 824:	60 95       	com	r22
 826:	64 bd       	out	0x24, r22	; 36
			TCCR2|=	gu8_PrescalerTimer2;
 828:	95 b5       	in	r25, 0x25	; 37
 82a:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <gu8_PrescalerTimer2>
 82e:	89 2b       	or	r24, r25
 830:	85 bd       	out	0x25, r24	; 37
		return E_NOK;
		break;
		default:
		return E_NOK;
	}
	return E_OK;
 832:	80 e0       	ldi	r24, 0x00	; 0
			TCNT2=(TIMER0_RESLUTION-u16_CountNO);
			TCCR2|=	gu8_PrescalerTimer2;
		}
		else 
		return E_NOK;
		break;
 834:	08 95       	ret
		default:
		return E_NOK;
 836:	81 e0       	ldi	r24, 0x01	; 1
 838:	08 95       	ret
		TCNT0=(TIMER0_RESLUTION-u16_CountNO);
		TCCR0|=	gu8_PrescalerTimer0;// not handle
		}
		
		else
		 return E_NOK;
 83a:	81 e0       	ldi	r24, 0x01	; 1
 83c:	08 95       	ret
			
			TCNT2=(TIMER0_RESLUTION-u16_CountNO);
			TCCR2|=	gu8_PrescalerTimer2;
		}
		else 
		return E_NOK;
 83e:	81 e0       	ldi	r24, 0x01	; 1
		default:
		return E_NOK;
	}
	return E_OK;
	
	}
 840:	08 95       	ret

00000842 <Timer_Stop>:


extern uint8_t Timer_Stop(uint8_t u8_TimerCh){
	
		switch(u8_TimerCh){
 842:	81 30       	cpi	r24, 0x01	; 1
 844:	49 f0       	breq	.+18     	; 0x858 <Timer_Stop+0x16>
 846:	18 f0       	brcs	.+6      	; 0x84e <Timer_Stop+0xc>
 848:	82 30       	cpi	r24, 0x02	; 2
 84a:	59 f0       	breq	.+22     	; 0x862 <__stack+0x3>
 84c:	0f c0       	rjmp	.+30     	; 0x86c <__stack+0xd>
		case TIMER_CH_0:
		TCCR0&=TIMER0_NO_CLOCK;
 84e:	83 b7       	in	r24, 0x33	; 51
 850:	88 7f       	andi	r24, 0xF8	; 248
 852:	83 bf       	out	0x33, r24	; 51
		TCCR2&=TIMER2_NO_CLOCK;
		break;
		default:
		return E_NOK;
		}
		return E_OK;
 854:	80 e0       	ldi	r24, 0x00	; 0
extern uint8_t Timer_Stop(uint8_t u8_TimerCh){
	
		switch(u8_TimerCh){
		case TIMER_CH_0:
		TCCR0&=TIMER0_NO_CLOCK;
		break;
 856:	08 95       	ret
		
		case TIMER_CH_1:
		TCCR1B&=TIMER1_NO_CLOCK;
 858:	8e b5       	in	r24, 0x2e	; 46
 85a:	88 7f       	andi	r24, 0xF8	; 248
 85c:	8e bd       	out	0x2e, r24	; 46
		TCCR2&=TIMER2_NO_CLOCK;
		break;
		default:
		return E_NOK;
		}
		return E_OK;
 85e:	80 e0       	ldi	r24, 0x00	; 0
		TCCR0&=TIMER0_NO_CLOCK;
		break;
		
		case TIMER_CH_1:
		TCCR1B&=TIMER1_NO_CLOCK;
		break;
 860:	08 95       	ret
		
		case TIMER_CH_2:
		TCCR2&=TIMER2_NO_CLOCK;
 862:	85 b5       	in	r24, 0x25	; 37
 864:	88 7f       	andi	r24, 0xF8	; 248
 866:	85 bd       	out	0x25, r24	; 37
		break;
		default:
		return E_NOK;
		}
		return E_OK;
 868:	80 e0       	ldi	r24, 0x00	; 0
		TCCR1B&=TIMER1_NO_CLOCK;
		break;
		
		case TIMER_CH_2:
		TCCR2&=TIMER2_NO_CLOCK;
		break;
 86a:	08 95       	ret
		default:
		return E_NOK;
 86c:	81 e0       	ldi	r24, 0x01	; 1
		}
		return E_OK;
		}
 86e:	08 95       	ret

00000870 <Timer_GetValue>:
	


extern uint8_t Timer_GetValue(uint8_t u8_TimerCh,uint16_t *pu16_TimerValue){
	uint8_t u8_TIMSK_StatusRegister=0;
		switch(u8_TimerCh){
 870:	81 30       	cpi	r24, 0x01	; 1
 872:	59 f0       	breq	.+22     	; 0x88a <Timer_GetValue+0x1a>
 874:	18 f0       	brcs	.+6      	; 0x87c <Timer_GetValue+0xc>
 876:	82 30       	cpi	r24, 0x02	; 2
 878:	a1 f0       	breq	.+40     	; 0x8a2 <Timer_GetValue+0x32>
 87a:	1a c0       	rjmp	.+52     	; 0x8b0 <Timer_GetValue+0x40>
			case TIMER_CH_0 :
			*pu16_TimerValue=TCNT0;
 87c:	82 b7       	in	r24, 0x32	; 50
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	fb 01       	movw	r30, r22
 882:	91 83       	std	Z+1, r25	; 0x01
 884:	80 83       	st	Z, r24
			default:
			return E_NOK;
		}
		
		
		return E_OK;
 886:	80 e0       	ldi	r24, 0x00	; 0
extern uint8_t Timer_GetValue(uint8_t u8_TimerCh,uint16_t *pu16_TimerValue){
	uint8_t u8_TIMSK_StatusRegister=0;
		switch(u8_TimerCh){
			case TIMER_CH_0 :
			*pu16_TimerValue=TCNT0;
			break;
 888:	08 95       	ret
			
			case TIMER_CH_1 :
			
			 u8_TIMSK_StatusRegister=TIMSK;
 88a:	99 b7       	in	r25, 0x39	; 57
			TIMSK&=TIMER1_MASK_DIS_EN_I ;
 88c:	89 b7       	in	r24, 0x39	; 57
 88e:	83 7c       	andi	r24, 0xC3	; 195
 890:	89 bf       	out	0x39, r24	; 57
			*pu16_TimerValue=TCNT1;
 892:	2c b5       	in	r18, 0x2c	; 44
 894:	3d b5       	in	r19, 0x2d	; 45
 896:	fb 01       	movw	r30, r22
 898:	31 83       	std	Z+1, r19	; 0x01
 89a:	20 83       	st	Z, r18
			TIMSK=u8_TIMSK_StatusRegister;
 89c:	99 bf       	out	0x39, r25	; 57
			default:
			return E_NOK;
		}
		
		
		return E_OK;
 89e:	80 e0       	ldi	r24, 0x00	; 0
			
			 u8_TIMSK_StatusRegister=TIMSK;
			TIMSK&=TIMER1_MASK_DIS_EN_I ;
			*pu16_TimerValue=TCNT1;
			TIMSK=u8_TIMSK_StatusRegister;
			break;
 8a0:	08 95       	ret
			
			case TIMER_CH_2 ://there is special case in counter mode ASSR Note handle 
			*pu16_TimerValue=TCNT2;
 8a2:	84 b5       	in	r24, 0x24	; 36
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	fb 01       	movw	r30, r22
 8a8:	91 83       	std	Z+1, r25	; 0x01
 8aa:	80 83       	st	Z, r24
			default:
			return E_NOK;
		}
		
		
		return E_OK;
 8ac:	80 e0       	ldi	r24, 0x00	; 0
			TIMSK=u8_TIMSK_StatusRegister;
			break;
			
			case TIMER_CH_2 ://there is special case in counter mode ASSR Note handle 
			*pu16_TimerValue=TCNT2;
			break;
 8ae:	08 95       	ret
			default:
			return E_NOK;
 8b0:	81 e0       	ldi	r24, 0x01	; 1
		}
		
		
		return E_OK;
	}
 8b2:	08 95       	ret

000008b4 <Us_Init>:

u8_ERROR_STATUS_t Us_Init(void){
	
	//DIO_init (&str_US_pinConf);
	//DIO_Write (GPIO_TRIGGER_PORT, GPIO_TRIGGER_PIN ,LOW);
	PORTB_DIR |= 0x01;
 8b4:	b8 9a       	sbi	0x17, 0	; 23
	Icu_Init(&str_ICU_Cfg);
 8b6:	82 e7       	ldi	r24, 0x72	; 114
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	0e 94 3e 01 	call	0x27c	; 0x27c <Icu_Init>
	return E_OK;
}
 8be:	80 e0       	ldi	r24, 0x00	; 0
 8c0:	08 95       	ret

000008c2 <Us_Trigger>:
u8_ERROR_STATUS_t Us_Trigger(void){
	DIO_Write (GPIO_TRIGGER_PORT, GPIO_TRIGGER_PIN ,HIGH);
 8c2:	4f ef       	ldi	r20, 0xFF	; 255
 8c4:	61 e0       	ldi	r22, 0x01	; 1
 8c6:	81 e0       	ldi	r24, 0x01	; 1
 8c8:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_Write>
	
	softwareDelayMs(15);
 8cc:	6f e0       	ldi	r22, 0x0F	; 15
 8ce:	70 e0       	ldi	r23, 0x00	; 0
 8d0:	80 e0       	ldi	r24, 0x00	; 0
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	0e 94 15 03 	call	0x62a	; 0x62a <softwareDelayMs>
	
	DIO_Write (GPIO_TRIGGER_PORT, GPIO_TRIGGER_PIN ,LOW);
 8d8:	40 e0       	ldi	r20, 0x00	; 0
 8da:	61 e0       	ldi	r22, 0x01	; 1
 8dc:	81 e0       	ldi	r24, 0x01	; 1
 8de:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_Write>
	return E_OK;
}
 8e2:	80 e0       	ldi	r24, 0x00	; 0
 8e4:	08 95       	ret

000008e6 <Us_GetDistance>:

u8_ERROR_STATUS_t Us_GetDistance(uint16_t *pu16_Distance){
 8e6:	0f 93       	push	r16
 8e8:	1f 93       	push	r17
 8ea:	cf 93       	push	r28
 8ec:	df 93       	push	r29
 8ee:	00 d0       	rcall	.+0      	; 0x8f0 <Us_GetDistance+0xa>
 8f0:	00 d0       	rcall	.+0      	; 0x8f2 <Us_GetDistance+0xc>
 8f2:	cd b7       	in	r28, 0x3d	; 61
 8f4:	de b7       	in	r29, 0x3e	; 62
 8f6:	8c 01       	movw	r16, r24
	uint32_t  pu16_Temp;
	Icu_ReadTime(ICU_CH2,ICU_RISE_TO_FALL, &pu16_Temp);
 8f8:	ae 01       	movw	r20, r28
 8fa:	4f 5f       	subi	r20, 0xFF	; 255
 8fc:	5f 4f       	sbci	r21, 0xFF	; 255
 8fe:	61 e0       	ldi	r22, 0x01	; 1
 900:	82 e0       	ldi	r24, 0x02	; 2
 902:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Icu_ReadTime>

	*pu16_Distance = pu16_Temp ;
 906:	89 81       	ldd	r24, Y+1	; 0x01
 908:	9a 81       	ldd	r25, Y+2	; 0x02
 90a:	f8 01       	movw	r30, r16
 90c:	91 83       	std	Z+1, r25	; 0x01
 90e:	80 83       	st	Z, r24
	
	
	//softwareDelayMs(60);
	return E_OK;
 910:	80 e0       	ldi	r24, 0x00	; 0
 912:	0f 90       	pop	r0
 914:	0f 90       	pop	r0
 916:	0f 90       	pop	r0
 918:	0f 90       	pop	r0
 91a:	df 91       	pop	r29
 91c:	cf 91       	pop	r28
 91e:	1f 91       	pop	r17
 920:	0f 91       	pop	r16
 922:	08 95       	ret

00000924 <__udivmodsi4>:
 924:	a1 e2       	ldi	r26, 0x21	; 33
 926:	1a 2e       	mov	r1, r26
 928:	aa 1b       	sub	r26, r26
 92a:	bb 1b       	sub	r27, r27
 92c:	fd 01       	movw	r30, r26
 92e:	0d c0       	rjmp	.+26     	; 0x94a <__udivmodsi4_ep>

00000930 <__udivmodsi4_loop>:
 930:	aa 1f       	adc	r26, r26
 932:	bb 1f       	adc	r27, r27
 934:	ee 1f       	adc	r30, r30
 936:	ff 1f       	adc	r31, r31
 938:	a2 17       	cp	r26, r18
 93a:	b3 07       	cpc	r27, r19
 93c:	e4 07       	cpc	r30, r20
 93e:	f5 07       	cpc	r31, r21
 940:	20 f0       	brcs	.+8      	; 0x94a <__udivmodsi4_ep>
 942:	a2 1b       	sub	r26, r18
 944:	b3 0b       	sbc	r27, r19
 946:	e4 0b       	sbc	r30, r20
 948:	f5 0b       	sbc	r31, r21

0000094a <__udivmodsi4_ep>:
 94a:	66 1f       	adc	r22, r22
 94c:	77 1f       	adc	r23, r23
 94e:	88 1f       	adc	r24, r24
 950:	99 1f       	adc	r25, r25
 952:	1a 94       	dec	r1
 954:	69 f7       	brne	.-38     	; 0x930 <__udivmodsi4_loop>
 956:	60 95       	com	r22
 958:	70 95       	com	r23
 95a:	80 95       	com	r24
 95c:	90 95       	com	r25
 95e:	9b 01       	movw	r18, r22
 960:	ac 01       	movw	r20, r24
 962:	bd 01       	movw	r22, r26
 964:	cf 01       	movw	r24, r30
 966:	08 95       	ret

00000968 <__umulhisi3>:
 968:	a2 9f       	mul	r26, r18
 96a:	b0 01       	movw	r22, r0
 96c:	b3 9f       	mul	r27, r19
 96e:	c0 01       	movw	r24, r0
 970:	a3 9f       	mul	r26, r19
 972:	70 0d       	add	r23, r0
 974:	81 1d       	adc	r24, r1
 976:	11 24       	eor	r1, r1
 978:	91 1d       	adc	r25, r1
 97a:	b2 9f       	mul	r27, r18
 97c:	70 0d       	add	r23, r0
 97e:	81 1d       	adc	r24, r1
 980:	11 24       	eor	r1, r1
 982:	91 1d       	adc	r25, r1
 984:	08 95       	ret

00000986 <_exit>:
 986:	f8 94       	cli

00000988 <__stop_program>:
 988:	ff cf       	rjmp	.-2      	; 0x988 <__stop_program>
